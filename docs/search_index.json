[
["index.html", "PSY6422 Data Management and Visualisation @ The University of Sheffield Overview 0.1 Resources 0.2 Course Outline 0.3 Example Projects", " PSY6422 Data Management and Visualisation @ The University of Sheffield Tom Stafford 2020-04-13 Overview PSY6422 Data Management and Visualisation is part of the MSc in Psychological Research Methods with Data Science taught at The University of Sheffield by Tom Stafford 0.1 Resources Google Drive (UoS login required to access): Includes slides and workbooks, as well as these specific documents Timetable Useful information Assessment Criteria These pages (hosted on github, no login required): Reading list 0.2 Course Outline The topics we cover are: Module overview - ethics and aesthetics of visualisaion, the importance of reproducible workflows Project organisation - fundamentals of data storage, syncronisation and sharing R / Rstudio - introduction to the statistical computing language Making graphs Data Management Data Management 2 Coding principles - fundamental principles of coding, writing good code, asking for help Better graphs Git and github RMarkdown Publishing to pages - like this one! Stretch goals: Unfortunately we won't have time this year for a number of advanced topics which I would like to cover. Hopefully next year: Jupyter notebooks The terminal / ssh Interactive visualisation with Shiny apps SQL 0.3 Example Projects The bulk of the assessment is to conduct and publish your own analysis project. Here is an example small project which gives an idea of what I mean SuperTues: Published, repo Stretch goal is to build an interactive data visualisation using Shiny Here's one I built earlier Power analyser "],
["module-overview.html", "Chapter 1 Module Overview", " Chapter 1 Module Overview This is a placeholder page. This material was delivered offline Specific resources: TO APPEAR&lt;&lt; "],
["project-organisation.html", "Chapter 2 Project Organisation", " Chapter 2 Project Organisation This is a placeholder page. This material was delivered offline Specific resources: TO APPEAR&lt;&lt; "],
["r-r-studio.html", "Chapter 3 R &amp; R Studio", " Chapter 3 R &amp; R Studio This is a placeholder page. This material was delivered offline Specific resources: TO APPEAR&lt;&lt; "],
["making-graphs.html", "Chapter 4 Making Graphs", " Chapter 4 Making Graphs This is a placeholder page. This material was delivered offline Specific resources: TO APPEAR&lt;&lt; "],
["data-management.html", "Chapter 5 Data Management", " Chapter 5 Data Management This is a placeholder page. This material was delivered offline Specific resources: TO APPEAR&lt;&lt; "],
["coding-principles.html", "Chapter 6 Coding Principles 6.1 Fundamental methods 6.2 Fundamental principles of good code", " Chapter 6 Coding Principles This class is about two kinds of fundamental principles of coding. The first is fundamental methods of making code do what you want - if statement, loops, functions. The second is fundamental principles of good code. Although we are using R, all programming languages use similar methods (although the exact syntax differs), and the principles of good code will also apply across languages. As well demonstrating these fundamentals, these pages also introduce the vocabulary used to discuss them. Knowing the vocabulary helps because it means you know what terms to use when searching for solutions to problems you have. 6.1 Fundamental methods if statements loops functions 6.1.1 If statements So far we have written simple scripts that do things in order, top to bottom a &lt;- 1 # define a variable a &lt;- a + 1 #add 1 print(a) # output the result ## [1] 2 The first block above is the code, the second block (the lines which start with ##) is the output. Changing which statements are run is called &quot;flow control&quot;. An &quot;If statement&quot; is a fundamental way of doing this. It allows us to specify one set statements to run if a certain conditions is met. For example a &lt;- 1 # define a variable a &lt;- a + 1 #add 1 if(a&gt;4) # this is the condition which has to be met, the &#39;test expression&#39; {print(a)} # this statement runs if the test expression is true Notice there is no output. Copy the code to your own computer and run it. Now change the first line to a &lt;- 9 and run it again. An If statement defines a branch in the flow of a script. The default can be nothing happening, but sometimes you want to define two alternatives. You can do this with an &quot;If...else...statement&quot; a &lt;- 1 # define a variable a &lt;- a + 1 #add 1 if(a&gt;4){ # this is the condition which has to be met, the &#39;test expression&#39; print(paste(a,&quot; is more than 4&quot;)) # this statement runs if the test expression is true } else { {print(paste(a,&quot; is equal or less than 4&quot;))} # this statement runs if the test expression is false } ## [1] &quot;2 is equal or less than 4&quot; You can actually have as many branches as you like, defining a series of test_expressions, like this type_of_thing=&#39;&#39; print(&quot;Is four a lot?&quot;) if (type_of_thing==&#39;Murders&#39;){ print(&quot;yes&quot;) } else if (type_of_thing==&#39;Dollars&#39;){ print(&quot;no&quot;) } else { print(&quot;Depends on the context&quot;) } ## [1] &quot;Is four a lot?&quot; ## [1] &quot;Depends on the context&quot; 6.1.2 Loops Loops repeat, either iterating over a set values, like this: for (i in 1:5){ print(i) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 Or until some condition is met i &lt;- 1 #need to initialise a starting value while(i&lt;6){ print(i) i &lt;- i + 1 # increment the value of the counter } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 Note that this second version, a &quot;while loop&quot; uses a test expression just like an if statement Loops are useful wherever you might want to repeat some operation. years &lt;- 10 #how many years since you started saving savings &lt;-100 #how much you start with interest &lt;- 1.05 #rate of interest, ie 5% interest #Calculate using a loop for (years in 1:years){ savings&lt;-savings*interest } print(paste(&quot;After&quot;, years, &quot;years you will have £&quot;, round(savings,2))) #save more, kids ## [1] &quot;After 10 years you will have £ 162.89&quot; Lots of people advise against using loops because they are can be slow and it isn't always obvious what they are doing. Alternatives often exist, like vectorisation: years &lt;- 20 #how many years since you started saving savings &lt;-100 #how much you start with interest &lt;- 1.05 #rate of interest, ie 5% interest #Calculate using a vector total_at_each_year=savings*interest**(1:years) #rather than a loop all the answer values are stored in a single vector plot(total_at_each_year,xlab=&quot;years&quot;) #bonus! We can plot, since we now have all the intervening values saved Figure 6.1: CAPTION THIS FIGURE!! The problem is, loops are the natural way to think about some problems. Often I first write my code with loops then, when I know what I really want to do I try and work out a way to do it with vectorisation. 6.1.3 Functions Functions take in values (called &quot;arguments&quot;), do something with them, and give a value or values back in return. You have already used functions, for example the mean function my_nums=c(78,12,32,24,03,89) #just a vector of some numbers mean(my_nums) #use the mean function to find the average ## [1] 39.66667 Functions always do the same thing, but give different results depending on the inputs (depending on the &quot;arguments you pass to the function&quot;). You can write your own functions, and then use them again and again (&quot;call them again and again&quot;). Here is the general form of a function myfunctionname &lt;- function(input_value) { # comment line helpfully explaining what the function does output_value &lt;- input_value #lines of code which do something to the input to produce the output return(output_value) } Note a couple of things: when you run this code it does not produce any output, but a new object appears in the &quot;global environment&quot; window, top right. Like a variable, your function is now stored in the memory of the current R session. You can call this function now. If you close R you'll need to define the function again by running the above code again (other functions are inbuilt, like mean and are loaded at startup, or when you use the library command to load a set of functions). print(myfunctionname(3)) ## [1] 3 Now, when we call the function, we pass actual values. Let's make our a slightly more complicated adder &lt;- function(first_val,second_val) { # raises any input to the second power output_value &lt;- first_val + second_val return(output_value) } This does what it says on the tin adder(3,5) ## [1] 8 6.1.3.1 A note about scope 6.1.4 Exercises 6.1.5 More Lisa DeBruine, &amp; Dale Barr. (2019, December 5). Data Skills for Reproducible Science (Version 1.0.0). Zenodo. http://doi.org/10.5281/zenodo.3564555: Iterations &amp; Functions datamentor.io on Flow control 6.2 Fundamental principles of good code 6.2.1 Comment Your most important collaborator is you from six months ago, and they don't answer email. 6.2.2 Functionalise Shorter code A shortcut when writing code A shortcut when reading code 6.2.3 Avoid hard coded values Transparency Flexibility 6.2.4 Ask for help Writing a complete example Your code is good enough to share "],
["git-and-github.html", "Chapter 7 Git and Github 7.1 Bonus Links", " Chapter 7 Git and Github With our guest lecturer, Seb James Content to follow.... 7.1 Bonus Links Understanding Git Conceptually Vuorre, M., &amp; Curley, J. P. (2018). Curating research assets: A tutorial on the git version control system. Advances in Methods and Practices in Psychological Science, 1(2), 219-236. "],
["reading-list.html", "Chapter 8 Reading List 8.1 Visualisation (theory) 8.2 The Reproducibility Crisis 8.3 Better practice 8.4 Project organisation 8.5 Coding 8.6 R 8.7 Making graphs (practice)", " Chapter 8 Reading List Further reading, including books, links, demos and packages. You don't need to read all of this, but you will want to dig around. If I could recommend one book to accompany the courseit would be Healy, K. (2018). Data visualization: a practical introduction. Princeton University Press. 8.1 Visualisation (theory) Healy, K. (2018). Data visualization: a practical introduction. Princeton University Press. Cairo, A. (2012). The Functional Art: An introduction to information graphics and visualization. New Riders. Tufte, E. R. (2001). The visual display of quantitative information. Cheshire, CT: Graphics press. McCandless, D. (2012). Information is beautiful. London: Collins. Rougier, N. P., Droettboom, M., &amp; Bourne, P. E. (2014). Ten simple rules for better figures. PLoS Comput Biol, 10(9), e1003833. https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1003833 Weissgerber, T. L., Milic, N. M., Winham, S. J., &amp; Garovic, V. D. (2015). Beyond bar and line graphs: time for a new data presentation paradigm. PLoS biology, 13(4). 8.2 The Reproducibility Crisis Cancer Biology Reproducibility Project https://www.enago.com/academy/the-reproducibility-project-cancer-biology-to-replicate-only-18-studies-now/ Economics reproducibility https://www.wired.com/story/econ-statbias-study/ Video: Is Most Published Research Wrong https://www.youtube.com/watch?v=42QuXLucH3Q Demo: p-hacking https://fivethirtyeight.com/features/science-isnt-broken/#part1 Open Science Collaboration. (2015). Estimating the reproducibility of psychological science. Science, 349(6251), aac4716. 8.3 Better practice Munafo, M. R., et al. (2017). A manifesto for reproducible science . Nature Human Behaviour, 1, 0021. DOI: 10.0138/s41562-016-0021. Markowetz, F. (2015). Five selfish reasons to work reproducibly. Genome biology, 16(1), 274. https://genomebiology.biomedcentral.com/articles/10.1186/s13059-015-0850-7 A Guide to Reproducible Code in Ecology and Evolution https://www.britishecologicalsociety.org/wp-content/uploads/2017/12/guide-to-reproducible-code.pdf Gael Varoquaux: Computational practices for reproducible science https://www.slideshare.net/GaelVaroquaux/computational-practices-for-reproducible-science &quot;our wishlist for what knowledge and skills we'd find in a well-prepared data scientist candidate coming from a masters program.&quot; https://github.com/brohrer/academic_advisory/blob/master/curriculum_roadmap.md 8.4 Project organisation Mike Frank onboarding guide http://babieslearninglanguage.blogspot.co.uk/2017/01/onboarding.html Jenny Bryan: Naming Things http://www2.stat.duke.edu/~rcs46/lectures_2015/01-markdown-git/slides/naming-slides/naming-slides.pdf Broman &amp; Woo (2017) Data Organization in Spreadsheets https://www.tandfonline.com/doi/full/10.1080/00031305.2017.1375989 Video: Data Sharing and Management Snafu in 3 Short Acts https://www.youtube.com/watch?time_continue=2&amp;v=N2zK3sAtr-4 Hadley Wickham: Tidy Data: http://vita.had.co.nz/papers/tidy-data.pdf 8.5 Coding Readings in Applied Data Science https://github.com/hadley/stats337#readings Stack overflow: asking good questions https://stackoverflow.com/help/how-to-ask Stack overflow: provide a minimal, complete, verifable example https://stackoverflow.com/help/mcve Our Software Dependency Problem https://research.swtch.com/deps From Psychologist to Data Scientist https://www.neurotroph.de/2019/01/from-psychologist-to-data-scientist/ Bret Victor: Learnable Programming: Designing a programming system for understanding programs Top 10 Coding Mistakes Made by Data Scientists 8.6 R [Prime Hints For Running A Data Project In] R(https://kkulma.github.io/2018-03-18-Prime-Hints-for-Running-a-data-project-in-R/) Grolemund, G., &amp; Wickham, H. (2018). R for data science. * See also https://r4ds.had.co.nz/ Getting Used to R, RStudio, and R Markdown https://rbasics.netlify.com/ Adler, J. (2010). R in a nutshell: A desktop quick reference. &quot; O'Reilly Media, Inc.&quot;. Intro to R (Liz Page-Gould): http://www.page-gould.com/r/uoft/ Open R Textbook (Danielle Navarro): http://health.adelaide.edu.au/psychology/ccs/teaching/lsr/ Particularly chapter 3 https://learningstatisticswithr-bookdown.netlify.com/intror RStudio Cheat Sheets: https://www.rstudio.com/resources/cheatsheets/ Here::Here https://github.com/jennybc/here_here https://swirlstats.com/ Lisa DeBruine, &amp; Dale Barr. (2019). Data Skills for Reproducible Science. Zenodo. doi:10.5281/zenodo.3564348 https://psyteachr.github.io/msc-data-skills/ 8.7 Making graphs (practice) Graphing in R (Eric-Jan Wagenmakers and Quentin F. Gronau): http://shinyapps.org/apps/RGraphCompendium/index.php https://gupsych.github.io/data_skills/03_ggplot.html "],
["appendices.html", "Appendices 8.8 Credit 8.9 Help plz 8.10 Python 8.11 General righteousness 8.12 Testimonials", " Appendices 8.8 Credit These pages based on a template published by the awesome psyTeachR team. Extra thanks to Lisa DeBruine for help. Find the repo here: https://github.com/tomstafford/psy6422/ 8.9 Help plz Why doesn't the TOC in the leftbar collapse when clicked (or toggle between open and collapsed like it should)? 8.10 Python This course teaches general principles of coding and computation, and specific skills for data management and visualisation in R. Lots of people in the data science world, particularly in areas which align with computer science / machine learning, use Python. I decided to teach this course in R because the community around a language is as important as the language. You can do anything in any language, and most things as easily in Python as in R, but Psychologists, biologists and scholars from across the social sciences tend to use R, so I'm teaching this course in R. If you want to learn Python, I recommend: Resource list: Python for Non-Programmers Pages RealPython: Learn Python Programming, By Example Book: Python Data Science Handbook by Jake VanderPlas Book: Python for Data Analysis by Wes McKinney Pages: chrisalbon.com Pages: TowardsDataScience, for example this one A Quick Introduction to the “Pandas” Python Library Book: Python for Experimental Psychologists by Edwin Dalmaijer Pages: w3Schools 8.11 General righteousness You should use a password manager. Really. LastPass is recommended You should know how to use a VPN Advice for Sheffield students here: Working remotely - information for students You can test by visiting this page. If you are in the University network (either on campus or via a VPN) it will offer you the chance to download the article PDF. Otherwise it will try and charge you $35 for the privilege. 8.12 Testimonials Peter Carr "]
]
