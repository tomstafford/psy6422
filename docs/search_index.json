[
["index.html", "PSY6422 Data Management and Visualisation @ The University of Sheffield Overview 0.1 Resources 0.2 Course Outline 0.3 Example Projects", " PSY6422 Data Management and Visualisation @ The University of Sheffield Tom Stafford 2020-04-20 Overview PSY6422 Data Management and Visualisation is part of the MSc in Psychological Research Methods with Data Science taught at The University of Sheffield by Tom Stafford 0.1 Resources Google Drive (UoS login required to access): Includes slides and workbooks, as well as these specific documents Timetable Useful information Assessment Criteria These pages (hosted on github, no login required): Reading list 0.2 Course Outline The topics we cover are: Module overview - ethics and aesthetics of visualisaion, the importance of reproducible workflows Project organisation - fundamentals of data storage, syncronisation and sharing R / Rstudio - introduction to the statistical computing language Making graphs Data Management Data Management 2 Coding principles - fundamental principles of coding, writing good code, asking for help Rmarkdown Git and github Publishing to pages - like this one! Better graphs / preview of advanced topics Stretch goals: Unfortunately we won’t have time this year for a number of advanced topics which I would like to cover. Hopefully next year: Jupyter notebooks The terminal / ssh Interactive visualisation with Shiny apps SQL 0.3 Example Projects The bulk of the assessment is to conduct and publish your own analysis project. Here is an example small project which gives an idea of what I mean SuperTues: Published, repo Stretch goal is to build an interactive data visualisation using Shiny Here’s one I built earlier Power analyser "],
["module-overview.html", "1 Module Overview 1.1 Motivation 1.2 More", " 1 Module Overview This is a placeholder page. This material was delivered offline Specific resources: TO APPEAR&lt;&lt; 1.1 Motivation You are aiming to produce reproducible workflows - scripts that automate all steps between raw data and the final data in your papers. Point and click solutions (spreedsheets, SPSS) are inadequate. As well as being reproducible (by you or other researchers) your work should be legible (to Future You, or other researchers) and scalable (it should work as well on 400,000 data points as on 40). You will need help to do this. Therefore you will use Open Source solutions - these are analysis products which have a worldwide community of people using them, and the infrastructure which supports sharing advice and solutions. In practice, this means you are going to start by using R (you could use Python, but this module is based on R) 1.2 More Russ Poldrack’s Advice for learning to code from scratch "],
["project-organisation.html", "2 Project Organisation 2.1 Data Management 2.2 Reading:", " 2 Project Organisation This is a placeholder page. This material was delivered offline Specific resources: TO APPEAR&lt;&lt; 2.1 Data Management Everything recorded during an experiment, whether by you or the computer, is data. All log files. Everything. Never delete any data. All data should be backed-up automatically. Any back up process which requires you to remember to deploy it is fragile. Use a cloud synchronisation service like Google Drive or Dropbox. Never edit the raw data files. They should exist is a folder called or and only ever be opened, never modified in any way 2.2 Reading: Tidy Data organisation Habits and open data: Helping students develop a theory of scientific mind Broman &amp; Woo (2017) Data Organization in Spreadsheets "],
["r-r-studio.html", "3 R &amp; R Studio", " 3 R &amp; R Studio This is a placeholder page. This material was delivered offline Specific resources: TO APPEAR&lt;&lt; "],
["making-graphs.html", "4 Making Graphs", " 4 Making Graphs This is a placeholder page. This material was delivered offline Specific resources: TO APPEAR&lt;&lt; "],
["data-management-1.html", "5 Data Management", " 5 Data Management This is a placeholder page. This material was delivered offline Specific resources: TO APPEAR&lt;&lt; "],
["coding-principles.html", "6 Coding Principles 6.1 Fundamental methods 6.2 Fundamental principles of good code", " 6 Coding Principles This class is about two kinds of fundamental principles of coding. The first is fundamental methods of making code do what you want - if statement, loops, functions. The second is fundamental principles of good code. Although we are using R, all programming languages use similar methods (although the exact syntax differs), and the principles of good code will also apply across languages. As well demonstrating these fundamentals, these pages also introduce the vocabulary used to discuss them. Knowing the vocabulary helps because it means you know what terms to use when searching for solutions to problems you have. 6.1 Fundamental methods if statements loops functions 6.1.1 If statements So far we have written simple scripts that do things in order, top to bottom a &lt;- 1 # define a variable a &lt;- a + 1 #add 1 print(a) # output the result ## [1] 2 The first block above is the code, the second block (the lines which start with ##) is the output. Changing which statements are run is called “flow control”. An “If statement” is a fundamental way of doing this. It allows us to specify one set statements to run if a certain conditions is met. For example a &lt;- 1 # define a variable a &lt;- a + 1 #add 1 if(a&gt;4) # this is the condition which has to be met, the &#39;test expression&#39; {print(a)} # this statement runs if the test expression is true Notice there is no output. Copy the code to your own computer and run it. Now change the first line to a &lt;- 9 and run it again. An If statement defines a branch in the flow of a script. The default can be nothing happening, but sometimes you want to define two alternatives. You can do this with an “If…else…statement” a &lt;- 1 # define a variable a &lt;- a + 1 #add 1 if(a&gt;4){ # this is the condition which has to be met, the &#39;test expression&#39; print(paste(a,&quot; is more than 4&quot;)) # this statement runs if the test expression is true } else { {print(paste(a,&quot; is equal or less than 4&quot;))} # this statement runs if the test expression is false } ## [1] &quot;2 is equal or less than 4&quot; You can actually have as many branches as you like, defining a series of test_expressions, like this type_of_thing=&#39;&#39; print(&quot;Is four a lot?&quot;) if (type_of_thing==&#39;Murders&#39;){ print(&quot;yes&quot;) } else if (type_of_thing==&#39;Dollars&#39;){ print(&quot;no&quot;) } else { print(&quot;Depends on the context&quot;) } ## [1] &quot;Is four a lot?&quot; ## [1] &quot;Depends on the context&quot; 6.1.2 Loops Loops repeat, either iterating over a set values, like this: for (i in 1:5){ print(i) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 Or until some condition is met i &lt;- 1 #need to initialise a starting value while(i&lt;6){ print(i) i &lt;- i + 1 # increment the value of the counter } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 Note that this second version, a “while loop” uses a test expression just like an if statement Loops are useful wherever you might want to repeat some operation. years &lt;- 10 #how many years since you started saving savings &lt;-100 #how much you start with interest &lt;- 1.05 #rate of interest, ie 5% interest #Calculate using a loop for (years in 1:years){ savings&lt;-savings*interest } print(paste(&quot;After&quot;, years, &quot;years you will have £&quot;, round(savings,2))) #save more, kids ## [1] &quot;After 10 years you will have £ 162.89&quot; Lots of people advise against using loops because they are can be slow and it isn’t always obvious what they are doing. Alternatives often exist, like vectorisation: years &lt;- 20 #how many years since you started saving savings &lt;-100 #how much you start with interest &lt;- 1.05 #rate of interest, ie 5% interest #Calculate using a vector total_at_each_year=savings*interest**(1:years) #rather than a loop all the answer values are stored in a single vector plot(total_at_each_year,xlab=&quot;years&quot;) #bonus! We can plot, since we now have all the intervening values saved The problem is, loops are the natural way to think about some problems. Often I first write my code with loops then, when I know what I really want to do I try and work out a way to do it with vectorisation. 6.1.3 Functions Functions take in values (called “arguments”), do something with them, and give a value or values back in return. You have already used functions, for example the mean function my_nums=c(78,12,32,24,03,89) #just a vector of some numbers mean(my_nums) #use the mean function to find the average ## [1] 39.66667 Functions always do the same thing, but give different results depending on the inputs (depending on the “arguments you pass to the function”). You can write your own functions, and then use them again and again (“call them again and again”). Here is the general form of a function myfunctionname &lt;- function(input_value) { # comment line helpfully explaining what the function does output_value &lt;- input_value #lines of code which do something to the input to produce the output return(output_value) } Note a couple of things: when you run this code it does not produce any output, but a new object appears in the “global environment” window, top right. Like a variable, your function is now stored in the memory of the current R session. You can call this function now. If you close R you’ll need to define the function again by running the above code again (other functions are inbuilt, like mean and are loaded at startup, or when you use the library command to load a set of functions). Now, when we call the function, we pass actual values. print(myfunctionname(3)) ## [1] 3 Let’s make our a slightly more complicated outcheck &lt;- function(val,threshold) { # outlier checker if(val&lt;threshold){ output_value &lt;- val #if value is below theshold return that value } else { output_value &lt;- NA #otherwise, return NaN } return(output_value) } This function takes two input values, and returns a single value which depends on the relation between the two outcheck(3,5) ## [1] 3 outcheck(7,5) ## [1] NA 6.1.3.1 A note about scope Variables within functions are kept ‘inside’ the functions (within the “scope” of the function). Once you pass a value to a function is acquires the label set in the function definition. Variables defined within the function don’t persist outside of it (they don’t affect the “global environment”) So, for example, it doesn’t matter if you have another variable called threshold, the threshold within the function is set by the second value passed it. Like this: threshold &lt;- 100 outcheck(7,5) #returns NA because 7 is higher than 5 ## [1] NA 6.1.4 Exercises Write an if…else statement that prints “ODD” if the number is odd, “EVEN” if the number is even hint: you might use the remainder function %% (try 4%%2 to see how much is left when you divide 4 by 2) Write a loop which goes from 10 to 20 in steps of 3 Write a function which prints “FIZZ” if a number is divisible by 3, and “BUZZ” if it is divisible by 5 and “FIZZBUZZ” if it is divisble by 3 and 5 Write a loop which counts from 1 to 100 and applies the fizzbuzz function to each number 6.1.5 More Lisa DeBruine, &amp; Dale Barr. (2019, December 5). Data Skills for Reproducible Science (Version 1.0.0). Zenodo. http://doi.org/10.5281/zenodo.3564555: Iterations &amp; Functions datamentor.io on Flow control 6.2 Fundamental principles of good code 6.2.1 Readability Matters Your most important collaborator is you from six months ago, and they don’t answer email. Good code doesn’t just work, it is easy to understand. This supports the code being checked for errors, modified and improved (by you as well as by other people). To support this you should make your code readable. This means commenting your code, but also laying it out nicely, and using sensible names for variables and function. The aim is to make the code explain itself, as well as doing something. Someone who reads your code - a future you maybe, or a collaborator - needs to be able to run the code, yes, but they also need to know what you are doing and why you are doing. Look at this function, it hard to understand, right? pf &lt;- function(n){ p=1 ; if (n&gt;1){ i = 2; while( (i&lt;(n/2+1)) &amp; (p==1) ) {if (n%%i ==0) p=0; i=i+1 } } else {p=0 }; return(p) } This kind of code is very compressed. You can fit a lot in a few lines, but it is useless because nobody else will understand it, and probably the person who wrote it won’t understand it when they come back to it (and that means they will miss any bugs, or will find it hard to improve or repurpose). Readability is improved a lot by adding some spacing and tabs. Have another go at figuring out what the code does: pf &lt;- function(n){ p=1 if (n&gt;1){ i = 2 while( (i&lt;(n/2+1)) &amp; (p==1) ) { if (n%%i ==0) { p=0 } i=i+1 } } else { p=0 } return(p) } Now we make the variable and function names sensible: primecheck &lt;- function(num){ isprime=TRUE if (num&gt;1){ i = 2 while( (i&lt;(num/2+1)) &amp; (isprime==TRUE) ) { if (num%%i ==0) { isprime=FALSE } i=i+1 } } else { isprime=FALSE } return(isprime) } Can you tell what it does yet? Now fully commented primecheck &lt;- function(num){ #check if a number is prime # - assumes the number provided is an integer # - works by working through all possible divisors up to half the test number, checking if the remainer is 0 # isprime=TRUE # a flag, which tracks if we think the number is prime. We start out assuming our number *is* prime # first we only need to do the complicated method for numbers great than 1 if (num&gt;1){ i = 2 #a counter, starting at 2 (because all numbers divide by 1) #use while loop to check all divisors until we&#39;ve done them all or we find one (and confirm the number is not prime) while( (i&lt;(num/2+1)) &amp; (isprime==TRUE) ) { if (num%%i ==0) { #if the number divides by another number with no remainder it can&#39;t be prime, so we change the flag isprime=FALSE } i=i+1 # increment the counter, so we work through all possible divisors } } else { # if the number is 1 or lower it can&#39;t be prime, so we change the flag isprime=FALSE } return(isprime) #return the flag as the output of the function, 0 -&gt; not prime, 1 -&gt; prime } It is possible to comment too much. The code above I commented so someone who wasn’t an experienced programmer could read the comments and it would help them understand how the code worked (you can tell me if I succeeded). Usually a few fewer comments might make the code easier to read, with the assumption that anyone reading it has a bit of experience with the coding language. Like this primecheck &lt;- function(num){ #check if a number is prime # - assumes input is integer isprime=TRUE # a flag, start assuming our number *is* prime # only check numbers &gt; 1 if (num&gt;1){ i = 2 #a counter #check all divisors until we&#39;ve done them all or we find one while( (i&lt;(num/2+1)) &amp; (isprime==TRUE) ) { if (num%%i ==0) { #no remainder -&gt; number isn&#39;t prime isprime=FALSE } i=i+1 # increment the counter } } else { # if the number is 1 or lower it can&#39;t be prime isprime=FALSE } return(isprime) } This version is 22 lines rather than 1, but I hope you agree it is easier to work with. There’s no shortage of space in R scripts, so if in doubt, put some effort in to laying things out nicely, use sensible names for variable functions and add comments. You’ll thank yourself when you come back to your code (which you will always have to). 6.2.2 Avoid hard coded values Say you were going to load some data, you could do this: mydata = read.csv(&#39;/home/tom/Desktop/psy6422/mydatafile.csv&#39;) Now this happens to work on my computer, but it won’t on yours. The reason it won’t work isn’t because there is a bug in how i’m loading data, just that you don’t have a file in the same place as I do. Far better, for both readability and debugging if you seperate out values that might change from the commands that use them. Like this: datafile = &#39;/home/tom/Desktop/psy6422/mydatafile.csv&#39; mydata = read.csv(datafile) Now the second line is easier to read, and you also have a variable which you can reuse. For example maybe later in your script you want to save the name of the raw data file somewhere. You can just use: label = paste(&#39;This plot generated using data from &#39;, datafile) And when you use the same script for different data, both the lines loading data and recording the data file are correct. Another example graph1 &lt;- ggplot(data = anscombe, mapping = aes(x = x1, y=y1)) graph1 + geom_point(color=&#39;blue&#39;,size=3) #change this line for different look graph2 &lt;- ggplot(data = anscombe, mapping = aes(x = x2, y=y2)) graph2 + geom_point(color=&#39;blue&#39;,size=3) #change this line for different look Adding variables means you only need to edit one line to change the look of both plots pointcolour=&#39;red&#39;; pointsize=5 ; pointshape = 23 #change this line for different look graph1 &lt;- ggplot(data = anscombe, mapping = aes(x = x1, y=y1)) graph1 + geom_point(color=pointcolour,size=pointsize, shape = pointshape) # never change these lines graph2 &lt;- ggplot(data = anscombe, mapping = aes(x = x2, y=y2)) graph2 + geom_point(color=pointcolour,size=pointsize, shape = pointshape) # never change these lines This may seem minor, but as your code gets longer developing habits like this will save you time, and make your code easier to work with. 6.2.3 Functionalise &amp; Generalise If you ever find yourself using very similar lines of code, you should think about making a function. Functions make your code shorter and easier to read (and write), and they make it way easier to update (because when you catch a bug you can just update the code in the function, rather than every time you repeated those lines). Functions are also an opportunity to think to yourself “what is the most general purpose way of doing what I’m doing”. Thinking like this will help you develop powerful, flexible, code which you can use to do multiple things. Let’s look at a toy example: mynumbers = c(2,3,4) #double and add one to each number mynumbers[1] &lt;- mynumbers[1]*2+1 # line 1 mynumbers[2] &lt;- mynumbers[2]*2+1 # line 2 mynumbers[3] &lt;- mynumbers[3]*2+1 # line 3 print(mynumbers) ## [1] 5 7 9 This can be improved with a function myfunc &lt;- function(num){ #toy function, doubles and adds 1 return(num*2+1) } mynumbers = c(2,3,4) mynumbers &lt;- myfunc(mynumbers) # all the work with 1 line! print(mynumbers) ## [1] 5 7 9 This code is easier to read, easier to change, and you can write new code which uses this function again. 6.2.4 Ask for help Nobody finds this easy straight away. Learning how to find help a core programming skill (along with not giving up when it feels like you are completely stuck). Part of this is knowing how programming people talk about stuff so you can search effectively for solutions. If you get an error message, copy and paste it into your search. If you are really stuck, just trying to descibe you problem is a good way of indentifying exactly what you want to do, and why you can’t. When you’ve described your problem full - see this How to make a great R reproducible example - you can ask a friend or post it to a forum. If you’re on this module you can post it to Slack on the r-coding channel, or if not try seeking out R groups in your city or institution. Shout out to Rladies 6.2.5 More Program better, for fun and for profit Prime Hints For Running A Data Project In R Software Carpentry: Best Practices for Writing R Code Nice R code: bad habits Barnes, N. (2010). Publish your computer code: it is good enough. Nature, 467(7317), 753-753. Axelrod, V. (2014). Minimizing bugs in cognitive neuroscience programming. Frontiers in psychology, 5, 1435. Wilson, G., Aruliah, D. A., Brown, C. T., Hong, N. P. C., Davis, M., Guy, R. T., … &amp; Waugh, B. (2014). Best practices for scientific computing. PLoS biology] 12(1), e1001745. "],
["rmarkdown.html", "7 Rmarkdown 7.1 And this line is a heading", " 7 Rmarkdown These pages are written in Rmarkdown. You can see this individual file here in the online repositry Rstudio magic turns this file in to a webpage which you are probably looking at now. Compare the file and the webpage. In the webpage this line is in bold. Why? In the webpage this line is in italic. Why? 7.1 And this line is a heading "],
["git-and-github.html", "8 Git and Github 8.1 Before the class 8.2 Resources 8.3 Bonus Links", " 8 Git and Github With our guest lecturer, Seb James 8.1 Before the class Create an account on github.com, if you don’t already have one. Make sure you have access to git on your computer: Students using windows can install: https://gitforwindows.org/ Once installed they should be able to open a git bash window and type git --version Students on a Mac will have git if they install ‘Xcode’ and ‘Command line tools for Xcode’.They can test by opening a terminal and typing git --version 8.2 Resources Intro to git talk: https://github.com/ABRG-Models/GitTutorial Software carpentry: http://sebjameswml.github.io/git-novice/ 8.3 Bonus Links Understanding Git Conceptually Vuorre, M., &amp; Curley, J. P. (2018). Curating research assets: A tutorial on the git version control system. Advances in Methods and Practices in Psychological Science, 1(2), 219-236. "],
["publishing.html", "9 Publishing 9.1 Sharing your Rmd files via Github pages 9.2 Other sharing options", " 9 Publishing 9.1 Sharing your Rmd files via Github pages Save your analysis in a file index.Rmd Click ‘knit’ in RStudio (selecting ‘knit to HTML’ if you haven’t specified this in the header) Save your files to a github repo: https://github.com/username/myrepo/ Via the browser, edit the settings for the repo and scroll down to ‘Github Pages’. There change ‘Source’ to ‘Master’ Your pages will be at https://username.github.io/myrepo/ 9.2 Other sharing options OSF Jupyter notebooks "],
["advanced-topics.html", "10 Advanced Topics 10.1 Better graphs 10.2 Reproducibility 10.3 Preview of other advanced topics", " 10 Advanced Topics 10.1 Better graphs 10.2 Reproducibility https://luisdva.github.io/rstats/annotater/ 10.3 Preview of other advanced topics "],
["reading-list.html", "11 Reading List 11.1 Visualisation (theory) 11.2 The Reproducibility Crisis 11.3 Better practice 11.4 Project organisation 11.5 Coding 11.6 R 11.7 Making graphs (practice)", " 11 Reading List Further reading, including books, links, demos and packages. You don’t need to read all of this, but you will want to dig around. If I could recommend one book to accompany the courseit would be Healy, K. (2018). Data visualization: a practical introduction. Princeton University Press. 11.1 Visualisation (theory) Healy, K. (2018). Data visualization: a practical introduction. Princeton University Press. Cairo, A. (2012). The Functional Art: An introduction to information graphics and visualization. New Riders. Tufte, E. R. (2001). The visual display of quantitative information. Cheshire, CT: Graphics press. McCandless, D. (2012). Information is beautiful. London: Collins. Rougier, N. P., Droettboom, M., &amp; Bourne, P. E. (2014). Ten simple rules for better figures. PLoS Comput Biol, 10(9), e1003833. https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1003833 Weissgerber, T. L., Milic, N. M., Winham, S. J., &amp; Garovic, V. D. (2015). Beyond bar and line graphs: time for a new data presentation paradigm. PLoS biology, 13(4). 11.2 The Reproducibility Crisis Cancer Biology Reproducibility Project https://www.enago.com/academy/the-reproducibility-project-cancer-biology-to-replicate-only-18-studies-now/ Economics reproducibility https://www.wired.com/story/econ-statbias-study/ Video: Is Most Published Research Wrong https://www.youtube.com/watch?v=42QuXLucH3Q Demo: p-hacking https://fivethirtyeight.com/features/science-isnt-broken/#part1 Open Science Collaboration. (2015). Estimating the reproducibility of psychological science. Science, 349(6251), aac4716. 11.3 Better practice Munafo, M. R., et al. (2017). A manifesto for reproducible science . Nature Human Behaviour, 1, 0021. DOI: 10.0138/s41562-016-0021. Markowetz, F. (2015). Five selfish reasons to work reproducibly. Genome biology, 16(1), 274. https://genomebiology.biomedcentral.com/articles/10.1186/s13059-015-0850-7 A Guide to Reproducible Code in Ecology and Evolution https://www.britishecologicalsociety.org/wp-content/uploads/2017/12/guide-to-reproducible-code.pdf Gael Varoquaux: Computational practices for reproducible science https://www.slideshare.net/GaelVaroquaux/computational-practices-for-reproducible-science “our wishlist for what knowledge and skills we’d find in a well-prepared data scientist candidate coming from a masters program.” https://github.com/brohrer/academic_advisory/blob/master/curriculum_roadmap.md 11.4 Project organisation Mike Frank onboarding guide http://babieslearninglanguage.blogspot.co.uk/2017/01/onboarding.html Jenny Bryan: Naming Things http://www2.stat.duke.edu/~rcs46/lectures_2015/01-markdown-git/slides/naming-slides/naming-slides.pdf Broman &amp; Woo (2017) Data Organization in Spreadsheets https://www.tandfonline.com/doi/full/10.1080/00031305.2017.1375989 Video: Data Sharing and Management Snafu in 3 Short Acts https://www.youtube.com/watch?time_continue=2&amp;v=N2zK3sAtr-4 Hadley Wickham: Tidy Data: http://vita.had.co.nz/papers/tidy-data.pdf 11.5 Coding Readings in Applied Data Science https://github.com/hadley/stats337#readings Stack overflow: asking good questions https://stackoverflow.com/help/how-to-ask Stack overflow: provide a minimal, complete, verifable example https://stackoverflow.com/help/mcve Our Software Dependency Problem https://research.swtch.com/deps From Psychologist to Data Scientist https://www.neurotroph.de/2019/01/from-psychologist-to-data-scientist/ Bret Victor: Learnable Programming: Designing a programming system for understanding programs Top 10 Coding Mistakes Made by Data Scientists 11.6 R [Prime Hints For Running A Data Project In] R(https://kkulma.github.io/2018-03-18-Prime-Hints-for-Running-a-data-project-in-R/) Grolemund, G., &amp; Wickham, H. (2018). R for data science. * See also https://r4ds.had.co.nz/ Getting Used to R, RStudio, and R Markdown https://rbasics.netlify.com/ Adler, J. (2010). R in a nutshell: A desktop quick reference. \" O’Reilly Media, Inc.\". Intro to R (Liz Page-Gould): http://www.page-gould.com/r/uoft/ Open R Textbook (Danielle Navarro): http://health.adelaide.edu.au/psychology/ccs/teaching/lsr/ Particularly chapter 3 https://learningstatisticswithr-bookdown.netlify.com/intror RStudio Cheat Sheets: https://www.rstudio.com/resources/cheatsheets/ Here::Here https://github.com/jennybc/here_here https://swirlstats.com/ Lisa DeBruine, &amp; Dale Barr. (2019). Data Skills for Reproducible Science. Zenodo. doi:10.5281/zenodo.3564348 https://psyteachr.github.io/msc-data-skills/ 11.7 Making graphs (practice) Graphing in R (Eric-Jan Wagenmakers and Quentin F. Gronau): http://shinyapps.org/apps/RGraphCompendium/index.php https://gupsych.github.io/data_skills/03_ggplot.html "],
["appendices.html", "Appendices 11.8 Credit 11.9 Help plz 11.10 Python 11.11 General righteousness 11.12 Testimonials", " Appendices 11.8 Credit These pages based on a template published by the awesome psyTeachR team. Extra thanks to Lisa DeBruine for help. Find the repo here: https://github.com/tomstafford/psy6422/ 11.9 Help plz Why doesn’t the TOC in the leftbar collapse when clicked (or toggle between open and collapsed like it should)? Here is the relevant page of the manual You can see that I have collapse: section in my _output.yml file here. Why doesn’t it work How do I get a horizontal line in the TOC/sidebar? 11.10 Python This course teaches general principles of coding and computation, and specific skills for data management and visualisation in R. Lots of people in the data science world, particularly in areas which align with computer science / machine learning, use Python. I decided to teach this course in R because the community around a language is as important as the language. You can do anything in any language, and most things as easily in Python as in R, but Psychologists, biologists and scholars from across the social sciences tend to use R, so I’m teaching this course in R. If you want to learn Python, I recommend: Resource list: Python for Non-Programmers Pages RealPython: Learn Python Programming, By Example Book: Python Data Science Handbook by Jake VanderPlas Book: Python for Data Analysis by Wes McKinney Pages: chrisalbon.com Pages: TowardsDataScience, for example this one A Quick Introduction to the “Pandas” Python Library Book: Python for Experimental Psychologists by Edwin Dalmaijer Pages: w3Schools 11.11 General righteousness You should use a password manager. Really. LastPass is recommended You should know how to use a VPN Advice for Sheffield students here: Working remotely - information for students You can test by visiting this page. If you are in the University network (either on campus or via a VPN) it will offer you the chance to download the article PDF. Otherwise it will try and charge you $35 for the privilege. 11.12 Testimonials Peter Carr "],
["overview-1.html", "Overview 11.13 Resources 11.14 Course Outline 11.15 Example Projects", " Overview PSY6422 Data Management and Visualisation is part of the MSc in Psychological Research Methods with Data Science taught at The University of Sheffield by Tom Stafford 11.13 Resources Google Drive (UoS login required to access): Includes slides and workbooks, as well as these specific documents Timetable Useful information Assessment Criteria These pages (hosted on github, no login required): Reading list 11.14 Course Outline The topics we cover are: Module overview - ethics and aesthetics of visualisaion, the importance of reproducible workflows Project organisation - fundamentals of data storage, syncronisation and sharing R / Rstudio - introduction to the statistical computing language Making graphs Data Management Data Management 2 Coding principles - fundamental principles of coding, writing good code, asking for help Rmarkdown Git and github Publishing to pages - like this one! Better graphs / preview of advanced topics Stretch goals: Unfortunately we won’t have time this year for a number of advanced topics which I would like to cover. Hopefully next year: Jupyter notebooks The terminal / ssh Interactive visualisation with Shiny apps SQL 11.15 Example Projects The bulk of the assessment is to conduct and publish your own analysis project. Here is an example small project which gives an idea of what I mean SuperTues: Published, repo Stretch goal is to build an interactive data visualisation using Shiny Here’s one I built earlier Power analyser "]
]
